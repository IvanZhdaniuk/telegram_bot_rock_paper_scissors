from config_data.config import load_config

import asyncio
import logging

from aiogram import Bot, Dispatcher
from handlers.user_handlers import register_user_handlers
from handlers.other_handlers import register_user_othets_handlers

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_all_handlers(dp: Dispatcher):
    register_user_othets_handlers(dp)
    register_user_handlers(dp)

# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format=u'%(filename)s:%(lineno)d #%(levelname)-8s '
               u'[%(asctime)s] - %(name)s - %(message)s')

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    logger.info('Starting bot')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
    config: Config = load_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä

    bot: Bot = Bot(token=config.tg_bot.token, parse_model='HTML')
    dp: Dispatcher = Dispatcher(bot)

    # —Ä—É–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–¥–ª–µ—Ä—ã
    register_all_handlers(dp)

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–∏–Ω–≥
    try:
        await dp.start_poling()
    finally:
        await bot.close()

if __name__ == 'main':
    try:
        # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º—ç–∏–Ω
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        # –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        # –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è KeybordInput –∏–ª–∏ SystemExit
        logger.error('Bot stopped!')

# Create object keyboards
# keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)


# Create objects button
# keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
#
# keyboard.row('1', '2', '3').row('4', '5', '6').insert('7')

# keyboard.add(KeyboardButton(text='send phone', request_contact=True))
# keyboard.add(KeyboardButton(text='send geolocation', request_location=True))
# keyboard.add(KeyboardButton(text='Create quizlet', request_poll=KeyboardButtonPollType()))
# keyboard.add(KeyboardButton(text='Start web app', web_app=WebAppInfo(url="https://stepik.org/")))

# button_1: KeyboardButton = KeyboardButton('–°–æ–±–∞–∫ ü¶Æ')
# button_2: KeyboardButton = KeyboardButton('–û–≥—É—Ä—Ü–æ–≤ ü•í')


# adding buttons in keyboard
#keyboard.add(button_1, button_2, *[KeyboardButton(f'{i+1}') for i in range(300)])

# keyboard.add(button_1, button_2, 'button 3').add('button 4').add('button 5', 'button 6')

# This handler will respond to the "/start" command and send the keyboard to the chat
# async def process_start_command(message: types.Message):
#     await message.answer('–ß–µ–≥–æ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
# reply_markup=keyboard)
#
# # This handler will respond to the '–°–æ–±–∞–∫" and delete the keyboard
# async def proces_dog_answer(message: types.Message):
#     await message.answer('–î–∞, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è —Å–æ–±–∞–∫. –ù–æ –≤—ã –≤–∏–¥–µ–ª–∏ –∫–∞–∫ –∫–æ—à–∫–∏ '
#                          '–±–æ—è—Ç—Å—è –æ–≥—É—Ä—Ü–æ–≤', reply_markup=ReplyKeyboardRemove())
#
# # This handler will respond to the '–û–≥—É—Ä—Ü–æ–≤" and delete the keyboard
# async def proces_cats_answer(message: types.Message):
#     await message.answer('–î–∞ –∏–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ –æ–≥—É—Ä—á–æ–≤ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ.',
#                          reply_markup=ReplyKeyboardRemove())
#
# # Registered handler
# dp.register_message_handler(process_start_command, commands='start')
# dp.register_message_handler(proces_dog_answer, text='–°–æ–±–∞–∫ ü¶Æ')
# dp.register_message_handler(proces_cats_answer, text='–û–≥—É—Ä—Ü–æ–≤ ü•í')
#
#

# print('BOT_TOKEN:', config.tg_bot.token)
# print('ADMIN_IDS:', config.tg_bot.admin_ids)
# print()
# print('DATABASE:', config.db.database)
# print('DB_HOST:', config.db.db_host)
# print('DB_USER:', config.db.db_user)
# print('DB_PASSWORD:', config.db.db_password)
#
# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)
